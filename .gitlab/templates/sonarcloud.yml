# This template allows setting up a project to integrate with SonarCloud to run code analysis
# In order to "force" the sonarcloud job run with your pipeline
# and not as separate pipline we need to apply workflow rules to your .gitlab-ci.
#
# workflow:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # always run for a MR
#     - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS  # Do not run for the branch if there is an open MR
#       when: never
#     - if: $CI_COMMIT_BRANCH == 'main'  # otherwise only run on the main branch
#
# https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html#two-pipelines-when-pushing-to-a-branch
# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
#
# You also need to ensure the that your test job uploads the coverage report as both a test coverage
# report for gitlab and an artifact that will be passed between jobs on GL. Just uploading it as a
# report will not pass it between jobs.
#
# test:
#   ...
#     artifacts:
#      paths:
#        - ./coverage.xml
#      reports:
#        coverage_report:
#          coverage_format: cobertura
#          path: ./coverage.xml
#
#
# Example sonar-project.properties
#
# sonar.projectKey=yoco_yoco-auth
# sonar.organization=yoco
# sonar.sources=./src
# sonar.sourceEncoding=UTF-8


# sonar.sources = src/app
# sonar.exclusions = src/tests
# sonar.tests = src/tests

# sonar.python.version=3.10
# sonar.python.coverage.reportPaths=coverage.xml

.sonarcloud:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    CACHE_KEY: "${CI_JOB_NAME}"
  cache:
    key: "${CACHE_KEY}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
